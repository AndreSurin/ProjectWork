#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Проверка создания справочников").ВТранзакции()
	.ДобавитьТест("СоздатьСправочник_СтатьиПредставительскихРасходов", "Статьи представительскиз расходов", "Позитив,Task-1, Сурин Андрей")
	.ДобавитьТест("СоздатьСправочник_Мероприятия", "Мероприятия", "Позитив,Task-1, Сурин Андрей")    
	.ДобавитьТест("СоздатьСправочник_МероприятияНегатив", "Мероприятия", "Негатив,Task-1, Сурин Андрей")
	;
	
	ЮТТесты.ДобавитьТестовыйНабор("Проверка создания документов").ВТранзакции()
	.ДобавитьТест("СоздатьДокумент_ПредставительскиеРасходы", "Представительские расходы", "Позитив,Task-1, Сурин Андрей")
	.ДобавитьТест("СоздатьДокумент_ПредставительскиеРасходыНегатив", "Представительские расходы", "Негатив,Task-1, Сурин Андрей")
	;
	
КонецПроцедуры

Процедура СоздатьДокумент_ПредставительскиеРасходыНегатив() Экспорт        
	
	// 1. Выполнение функции.
	// - Создание Документ.ПредставительскиеРасходы
	ДокументПредставительскиеРасходы = ЮТест.Данные().КонструкторОбъекта("Документ.ПредставительскиеРасходы")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля  
	.ФикцияРеквизитов("Поставщик,Организация")
	.Установить("Дата", ТекущаяДатаСеанса())   
	.Установить("Мероприятие", СоздатьСправочникМероприятия())
	.Установить("ДатаМероприятия", ТекущаяДатаСеанса())
		.ТабличнаяЧасть("СоставРасходов")
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 15000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				//.Установить("Сумма", 5000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 3000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 1500)
	.Записать() // Записываем документ и возвращаем ссылку
	;
	
	// 2. Проверка результата.
	ЮТест.ОжидаетЧто(ДокументПредставительскиеРасходы.ПолучитьОбъект())
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось провести")
		;
		
	СообщениеОбОшибке = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(СообщениеОбОшибке)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
		.ИмеетТип("Строка")
		.Содержит("Не заполнена колонка ""Сумма"" в строке 2 списка ""Состав расходов""")
		;
		
КонецПроцедуры // СоздатьДокумент_ПредставительскиеРасходыНегатив

Процедура СоздатьДокумент_ПредставительскиеРасходы() Экспорт        
	
	// 1. Выполнение функции.
	// - Создание Документ.ПредставительскиеРасходы
	ДокументПредставительскиеРасходы = ЮТест.Данные().КонструкторОбъекта("Документ.ПредставительскиеРасходы")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля  
	.ФикцияРеквизитов("Поставщик,Организация")
	.Установить("Дата", ТекущаяДатаСеанса())
	.Установить("Мероприятие", СоздатьСправочникМероприятия())
	.Установить("ДатаМероприятия", '2025.08.08 12:00:00')
		.ТабличнаяЧасть("СоставРасходов")
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 15000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 5000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 3000) 
			.ДобавитьСтроку()
				.Установить("СтатьяРасходов", СоздатьСправочникСтатьиПредставительскихРасходов()) 
				.Установить("Сумма", 1500)
	.Записать() // Записываем документ и возвращаем ссылку
	;
	
	// 2. Проверка результата.
	ЮТест.ОжидаетЧто(ДокументПредставительскиеРасходы.ПолучитьОбъект())
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.НеВыбрасываетИсключение()
		;
КонецПроцедуры // СоздатьДокумент_ПредставительскиеРасходы

Процедура СоздатьСправочник_СтатьиПредставительскихРасходов() Экспорт
	
	Ссылка = СоздатьСправочникСтатьиПредставительскихРасходов();
	
	ЮТест.ОжидаетЧто(Ссылка)
	.ИмеетТип("СправочникСсылка.СтатьиПредставительскихРасходов")
	;
	
КонецПроцедуры 

Функция СоздатьСправочникМероприятия()

Ссылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Мероприятия")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("ДатаМероприятия", ТекущаяДатаСеанса()) 
	.Записать()
	;
	
	Возврат Ссылка; 

КонецФункции // СоздатьСправочникМероприятия()


Процедура СоздатьСправочник_Мероприятия() Экспорт
	
Ссылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Мероприятия")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("ДатаМероприятия", '2025.08.08 12:00:00') 
	;
	
	ЮТест.ОжидаетЧто(Ссылка)
		.Метод("Записать")
		.НеВыбрасываетИсключение()
		;
КонецПроцедуры 

 Процедура СоздатьСправочник_МероприятияНегатив() Экспорт
	
Ссылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Мероприятия")      
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("ДатаМероприятия","")
	.Установить("Ответственный", Справочники.Пользователи.НайтиПоНаименованию("Прокопенко Евгения", Истина))
	;

	ЮТест.ОжидаетЧто(Ссылка)
		.Метод("Записать")
		.ВыбрасываетИсключение("Не удалось записать")
		;
	
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
	.ИмеетТип("ФиксированныйМассив")
	.ИмеетДлину(1)
	.Свойство("[0].Текст")
	.ИмеетТип("Строка")
	.Содержит("Поле ""Дата мероприятия"" не заполнено")
	;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьСправочникСтатьиПредставительскихРасходов()

	Ссылка = ЮТест.Данные().КонструкторОбъекта("Справочник.СтатьиПредставительскихРасходов")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("УчитыватьВНалоговомУчете", Истина)
	.Записать()
	;
	
	Возврат Ссылка;

КонецФункции // СоздатьСправочникСтатьиПредставительскихРасходов()


#КонецОбласти